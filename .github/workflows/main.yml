name: Posts workflow
on:
  push:
    branches:
    - "*"
  create:
    tags:
      - "*"
jobs:
  build_and_deploy:
    name: Build and deploy
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout this repo
      uses: actions/checkout@v2
    - name: Set environment
      id: set_env
      uses: mechtron/github-actions-set-env@3.0.0
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Prepare for API Docker image builds
      id: prep_api
      run: |
        DOCKER_IMAGE=mechtron/posts-api
        VERSION=edge
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi
        TAGS="${DOCKER_IMAGE}:${VERSION}"
        if [ "${{ github.event_name }}" = "push" ]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
        fi
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
    - name: Build API Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./api/
        file: ./api/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep_api.outputs.tags }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.created=${{ steps.prep_api.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}
    - name: Prepare for Web Docker image builds
      id: prep_web
      run: |
        DOCKER_IMAGE=mechtron/posts-web
        VERSION=edge
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi
        TAGS="${DOCKER_IMAGE}:${VERSION}"
        if [ "${{ github.event_name }}" = "push" ]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
        fi
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
    - name: Build Web Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./web/
        file: ./web/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep_web.outputs.tags }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.created=${{ steps.prep_web.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}
    - name: Deploy Helm chart to EKS
      uses: mechtron/github-actions-ek8s-toolbox@2.0.0
      env:
        API_SECRET: ${{ secrets.API_SECRET }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      with:
        awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
        awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        awsDefaultRegion: 'us-east-1'
        eksClusterName: ${{ secrets.EKS_CLUSTER_NAME }}
        helmVersion: '3.3.0'
        helmfileVersion: '0.125.7'
        kubectlVersion: '1.18.8'
        istioctlVersion: '1.5.9'
        kubevalVersion: '0.15.0'
        command: |
          helm repo add google https://charts.helm.sh/stable
          helm dependency update helm/posts
          helm upgrade \
            --install posts \
            --namespace=posts \
            --create-namespace \
            helm/posts \
            --set api.apiSecret=$API_SECRET \
            --set mysql.mysqlPassword=$MYSQL_PASSWORD
